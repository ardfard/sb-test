// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAudioConverter is an autogenerated mock type for the AudioConverter type
type MockAudioConverter struct {
	mock.Mock
}

type MockAudioConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAudioConverter) EXPECT() *MockAudioConverter_Expecter {
	return &MockAudioConverter_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function with given fields: ctx, inputPath, outputPath, outputFormat
func (_m *MockAudioConverter) Convert(ctx context.Context, inputPath string, outputPath string, outputFormat string) error {
	ret := _m.Called(ctx, inputPath, outputPath, outputFormat)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, inputPath, outputPath, outputFormat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAudioConverter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type MockAudioConverter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - ctx context.Context
//   - inputPath string
//   - outputPath string
//   - outputFormat string
func (_e *MockAudioConverter_Expecter) Convert(ctx interface{}, inputPath interface{}, outputPath interface{}, outputFormat interface{}) *MockAudioConverter_Convert_Call {
	return &MockAudioConverter_Convert_Call{Call: _e.mock.On("Convert", ctx, inputPath, outputPath, outputFormat)}
}

func (_c *MockAudioConverter_Convert_Call) Run(run func(ctx context.Context, inputPath string, outputPath string, outputFormat string)) *MockAudioConverter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockAudioConverter_Convert_Call) Return(_a0 error) *MockAudioConverter_Convert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAudioConverter_Convert_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockAudioConverter_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAudioConverter creates a new instance of MockAudioConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAudioConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAudioConverter {
	mock := &MockAudioConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
